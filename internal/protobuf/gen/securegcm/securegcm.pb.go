// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: securegcm.proto

package securegcm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This enum is used by iOS devices as values for device_display_diagonal_mils
// in GcmDeviceInfo. There is no good way to calculate it on those devices.
type AppleDeviceDiagonalMils int32

const (
	// This is the mils diagonal on an iPhone 5.
	AppleDeviceDiagonalMils_APPLE_PHONE AppleDeviceDiagonalMils = 4000
	// This is the mils diagonal on an iPad mini.
	AppleDeviceDiagonalMils_APPLE_PAD AppleDeviceDiagonalMils = 7900
)

// Enum value maps for AppleDeviceDiagonalMils.
var (
	AppleDeviceDiagonalMils_name = map[int32]string{
		4000: "APPLE_PHONE",
		7900: "APPLE_PAD",
	}
	AppleDeviceDiagonalMils_value = map[string]int32{
		"APPLE_PHONE": 4000,
		"APPLE_PAD":   7900,
	}
)

func (x AppleDeviceDiagonalMils) Enum() *AppleDeviceDiagonalMils {
	p := new(AppleDeviceDiagonalMils)
	*p = x
	return p
}

func (x AppleDeviceDiagonalMils) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppleDeviceDiagonalMils) Descriptor() protoreflect.EnumDescriptor {
	return file_securegcm_proto_enumTypes[0].Descriptor()
}

func (AppleDeviceDiagonalMils) Type() protoreflect.EnumType {
	return &file_securegcm_proto_enumTypes[0]
}

func (x AppleDeviceDiagonalMils) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AppleDeviceDiagonalMils) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AppleDeviceDiagonalMils(num)
	return nil
}

// Deprecated: Use AppleDeviceDiagonalMils.Descriptor instead.
func (AppleDeviceDiagonalMils) EnumDescriptor() ([]byte, []int) {
	return file_securegcm_proto_rawDescGZIP(), []int{0}
}

// This should be kept in sync with DeviceType in:
// java/com/google/security/cryptauth/backend/services/common/common_enums.proto
type DeviceType int32

const (
	DeviceType_UNKNOWN DeviceType = 0
	DeviceType_ANDROID DeviceType = 1
	DeviceType_CHROME  DeviceType = 2
	DeviceType_IOS     DeviceType = 3
	DeviceType_BROWSER DeviceType = 4
	DeviceType_OSX     DeviceType = 5
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ANDROID",
		2: "CHROME",
		3: "IOS",
		4: "BROWSER",
		5: "OSX",
	}
	DeviceType_value = map[string]int32{
		"UNKNOWN": 0,
		"ANDROID": 1,
		"CHROME":  2,
		"IOS":     3,
		"BROWSER": 4,
		"OSX":     5,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_securegcm_proto_enumTypes[1].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_securegcm_proto_enumTypes[1]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceType(num)
	return nil
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_securegcm_proto_rawDescGZIP(), []int{1}
}

// MultiDevice features which may be supported and enabled on a device. See
type SoftwareFeature int32

const (
	SoftwareFeature_UNKNOWN_FEATURE        SoftwareFeature = 0
	SoftwareFeature_BETTER_TOGETHER_HOST   SoftwareFeature = 1
	SoftwareFeature_BETTER_TOGETHER_CLIENT SoftwareFeature = 2
	SoftwareFeature_EASY_UNLOCK_HOST       SoftwareFeature = 3
	SoftwareFeature_EASY_UNLOCK_CLIENT     SoftwareFeature = 4
	SoftwareFeature_MAGIC_TETHER_HOST      SoftwareFeature = 5
	SoftwareFeature_MAGIC_TETHER_CLIENT    SoftwareFeature = 6
	SoftwareFeature_SMS_CONNECT_HOST       SoftwareFeature = 7
	SoftwareFeature_SMS_CONNECT_CLIENT     SoftwareFeature = 8
)

// Enum value maps for SoftwareFeature.
var (
	SoftwareFeature_name = map[int32]string{
		0: "UNKNOWN_FEATURE",
		1: "BETTER_TOGETHER_HOST",
		2: "BETTER_TOGETHER_CLIENT",
		3: "EASY_UNLOCK_HOST",
		4: "EASY_UNLOCK_CLIENT",
		5: "MAGIC_TETHER_HOST",
		6: "MAGIC_TETHER_CLIENT",
		7: "SMS_CONNECT_HOST",
		8: "SMS_CONNECT_CLIENT",
	}
	SoftwareFeature_value = map[string]int32{
		"UNKNOWN_FEATURE":        0,
		"BETTER_TOGETHER_HOST":   1,
		"BETTER_TOGETHER_CLIENT": 2,
		"EASY_UNLOCK_HOST":       3,
		"EASY_UNLOCK_CLIENT":     4,
		"MAGIC_TETHER_HOST":      5,
		"MAGIC_TETHER_CLIENT":    6,
		"SMS_CONNECT_HOST":       7,
		"SMS_CONNECT_CLIENT":     8,
	}
)

func (x SoftwareFeature) Enum() *SoftwareFeature {
	p := new(SoftwareFeature)
	*p = x
	return p
}

func (x SoftwareFeature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoftwareFeature) Descriptor() protoreflect.EnumDescriptor {
	return file_securegcm_proto_enumTypes[2].Descriptor()
}

func (SoftwareFeature) Type() protoreflect.EnumType {
	return &file_securegcm_proto_enumTypes[2]
}

func (x SoftwareFeature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SoftwareFeature) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SoftwareFeature(num)
	return nil
}

// Deprecated: Use SoftwareFeature.Descriptor instead.
func (SoftwareFeature) EnumDescriptor() ([]byte, []int) {
	return file_securegcm_proto_rawDescGZIP(), []int{2}
}

// A list of "reasons" that can be provided for calling server-side APIs.
// This is particularly important for calls that can be triggered by different
// kinds of events. Please try to keep reasons as generic as possible, so that
// codes can be re-used by various callers in a sensible fashion.
type InvocationReason int32

const (
	InvocationReason_REASON_UNKNOWN InvocationReason = 0
	// First run of the software package invoking this call
	InvocationReason_REASON_INITIALIZATION InvocationReason = 1
	// Ordinary periodic actions (e.g. monthly master key rotation)
	InvocationReason_REASON_PERIODIC InvocationReason = 2
	// Slow-cycle periodic action (e.g. yearly keypair rotation???)
	InvocationReason_REASON_SLOW_PERIODIC InvocationReason = 3
	// Fast-cycle periodic action (e.g. daily sync for Smart Lock users)
	InvocationReason_REASON_FAST_PERIODIC InvocationReason = 4
	// Expired state (e.g. expired credentials, or cached entries) was detected
	InvocationReason_REASON_EXPIRATION InvocationReason = 5
	// An unexpected protocol failure occurred (so attempting to repair state)
	InvocationReason_REASON_FAILURE_RECOVERY InvocationReason = 6
	// A new account has been added to the device
	InvocationReason_REASON_NEW_ACCOUNT InvocationReason = 7
	// An existing account on the device has been changed
	InvocationReason_REASON_CHANGED_ACCOUNT InvocationReason = 8
	// The user toggled the state of a feature (e.g. Smart Lock enabled via BT)
	InvocationReason_REASON_FEATURE_TOGGLED InvocationReason = 9
	// A "push" from the server caused this action (e.g. a sync tickle)
	InvocationReason_REASON_SERVER_INITIATED InvocationReason = 10
	// A local address change triggered this (e.g. GCM registration id changed)
	InvocationReason_REASON_ADDRESS_CHANGE InvocationReason = 11
	// A software update has triggered this
	InvocationReason_REASON_SOFTWARE_UPDATE InvocationReason = 12
	// A manual action by the user triggered this (e.g. commands sent via adb)
	InvocationReason_REASON_MANUAL InvocationReason = 13
	// A custom key has been invalidated on the device (e.g. screen lock is
	// disabled).
	InvocationReason_REASON_CUSTOM_KEY_INVALIDATION InvocationReason = 14
	// Periodic action triggered by auth_proximity
	InvocationReason_REASON_PROXIMITY_PERIODIC InvocationReason = 15
)

// Enum value maps for InvocationReason.
var (
	InvocationReason_name = map[int32]string{
		0:  "REASON_UNKNOWN",
		1:  "REASON_INITIALIZATION",
		2:  "REASON_PERIODIC",
		3:  "REASON_SLOW_PERIODIC",
		4:  "REASON_FAST_PERIODIC",
		5:  "REASON_EXPIRATION",
		6:  "REASON_FAILURE_RECOVERY",
		7:  "REASON_NEW_ACCOUNT",
		8:  "REASON_CHANGED_ACCOUNT",
		9:  "REASON_FEATURE_TOGGLED",
		10: "REASON_SERVER_INITIATED",
		11: "REASON_ADDRESS_CHANGE",
		12: "REASON_SOFTWARE_UPDATE",
		13: "REASON_MANUAL",
		14: "REASON_CUSTOM_KEY_INVALIDATION",
		15: "REASON_PROXIMITY_PERIODIC",
	}
	InvocationReason_value = map[string]int32{
		"REASON_UNKNOWN":                 0,
		"REASON_INITIALIZATION":          1,
		"REASON_PERIODIC":                2,
		"REASON_SLOW_PERIODIC":           3,
		"REASON_FAST_PERIODIC":           4,
		"REASON_EXPIRATION":              5,
		"REASON_FAILURE_RECOVERY":        6,
		"REASON_NEW_ACCOUNT":             7,
		"REASON_CHANGED_ACCOUNT":         8,
		"REASON_FEATURE_TOGGLED":         9,
		"REASON_SERVER_INITIATED":        10,
		"REASON_ADDRESS_CHANGE":          11,
		"REASON_SOFTWARE_UPDATE":         12,
		"REASON_MANUAL":                  13,
		"REASON_CUSTOM_KEY_INVALIDATION": 14,
		"REASON_PROXIMITY_PERIODIC":      15,
	}
)

func (x InvocationReason) Enum() *InvocationReason {
	p := new(InvocationReason)
	*p = x
	return p
}

func (x InvocationReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvocationReason) Descriptor() protoreflect.EnumDescriptor {
	return file_securegcm_proto_enumTypes[3].Descriptor()
}

func (InvocationReason) Type() protoreflect.EnumType {
	return &file_securegcm_proto_enumTypes[3]
}

func (x InvocationReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InvocationReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InvocationReason(num)
	return nil
}

// Deprecated: Use InvocationReason.Descriptor instead.
func (InvocationReason) EnumDescriptor() ([]byte, []int) {
	return file_securegcm_proto_rawDescGZIP(), []int{3}
}

type Type int32

const (
	Type_ENROLLMENT         Type = 0
	Type_TICKLE             Type = 1
	Type_TX_REQUEST         Type = 2
	Type_TX_REPLY           Type = 3
	Type_TX_SYNC_REQUEST    Type = 4
	Type_TX_SYNC_RESPONSE   Type = 5
	Type_TX_PING            Type = 6
	Type_DEVICE_INFO_UPDATE Type = 7
	Type_TX_CANCEL_REQUEST  Type = 8
	// DEPRECATED (can be re-used after Aug 2015)
	Type_PROXIMITYAUTH_PAIRING Type = 10
	// The kind of identity assertion generated by a "GCM V1" device (i.e.,
	// an Android phone that has registered with us a public and a symmetric
	// key)
	Type_GCMV1_IDENTITY_ASSERTION Type = 11
	// Device-to-device communications are protected by an unauthenticated
	// Diffie-Hellman exchange. The InitiatorHello message is simply the
	// initiator's public DH key, and is not encoded as a SecureMessage, so
	// it doesn't have a tag.
	// The ResponderHello message (which is sent by the responder
	// to the initiator), on the other hand, carries a payload that is protected
	// by the derived shared key. It also contains the responder's
	// public DH key. ResponderHelloAndPayload messages have the
	// DEVICE_TO_DEVICE_RESPONDER_HELLO tag.
	Type_DEVICE_TO_DEVICE_RESPONDER_HELLO_PAYLOAD Type = 12
	// Device-to-device communications are protected by an unauthenticated
	// Diffie-Hellman exchange. Once the initiator and responder
	// agree on a shared key (through Diffie-Hellman), they will use messages
	// tagged with DEVICE_TO_DEVICE_MESSAGE to exchange data.
	Type_DEVICE_TO_DEVICE_MESSAGE Type = 13
	// Notification to let a device know it should contact a nearby device.
	Type_DEVICE_PROXIMITY_CALLBACK Type = 14
	// Device-to-device communications are protected by an unauthenticated
	// Diffie-Hellman exchange. During device-to-device authentication, the first
	// message from initiator (the challenge) is signed and put into the payload
	// of the message sent back to the initiator.
	Type_UNLOCK_KEY_SIGNED_CHALLENGE Type = 15
	// Specialty (corp only) features
	Type_LOGIN_NOTIFICATION Type = 101
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:   "ENROLLMENT",
		1:   "TICKLE",
		2:   "TX_REQUEST",
		3:   "TX_REPLY",
		4:   "TX_SYNC_REQUEST",
		5:   "TX_SYNC_RESPONSE",
		6:   "TX_PING",
		7:   "DEVICE_INFO_UPDATE",
		8:   "TX_CANCEL_REQUEST",
		10:  "PROXIMITYAUTH_PAIRING",
		11:  "GCMV1_IDENTITY_ASSERTION",
		12:  "DEVICE_TO_DEVICE_RESPONDER_HELLO_PAYLOAD",
		13:  "DEVICE_TO_DEVICE_MESSAGE",
		14:  "DEVICE_PROXIMITY_CALLBACK",
		15:  "UNLOCK_KEY_SIGNED_CHALLENGE",
		101: "LOGIN_NOTIFICATION",
	}
	Type_value = map[string]int32{
		"ENROLLMENT":               0,
		"TICKLE":                   1,
		"TX_REQUEST":               2,
		"TX_REPLY":                 3,
		"TX_SYNC_REQUEST":          4,
		"TX_SYNC_RESPONSE":         5,
		"TX_PING":                  6,
		"DEVICE_INFO_UPDATE":       7,
		"TX_CANCEL_REQUEST":        8,
		"PROXIMITYAUTH_PAIRING":    10,
		"GCMV1_IDENTITY_ASSERTION": 11,
		"DEVICE_TO_DEVICE_RESPONDER_HELLO_PAYLOAD": 12,
		"DEVICE_TO_DEVICE_MESSAGE":                 13,
		"DEVICE_PROXIMITY_CALLBACK":                14,
		"UNLOCK_KEY_SIGNED_CHALLENGE":              15,
		"LOGIN_NOTIFICATION":                       101,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_securegcm_proto_enumTypes[4].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_securegcm_proto_enumTypes[4]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Type(num)
	return nil
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_securegcm_proto_rawDescGZIP(), []int{4}
}

// Message used only during enrollment
// Field numbers should be kept in sync with DeviceInfo in:
//
//	java/com/google/security/cryptauth/backend/services/common/common.proto
type GcmDeviceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This field's name does not match the one in DeviceInfo for legacy reasons.
	// Consider using long_device_id and device_type instead when enrolling
	// non-android devices.
	AndroidDeviceId *uint64 `protobuf:"fixed64,1,opt,name=android_device_id,json=androidDeviceId" json:"android_device_id,omitempty"`
	// Used for device_address of DeviceInfo field 2, but for GCM capable devices.
	GcmRegistrationId []byte `protobuf:"bytes,102,opt,name=gcm_registration_id,json=gcmRegistrationId" json:"gcm_registration_id,omitempty"`
	// Used for device_address of DeviceInfo field 2, but for iOS devices.
	ApnRegistrationId []byte `protobuf:"bytes,202,opt,name=apn_registration_id,json=apnRegistrationId" json:"apn_registration_id,omitempty"`
	// Does the user have notifications enabled for the given device address.
	NotificationEnabled *bool `protobuf:"varint,203,opt,name=notification_enabled,json=notificationEnabled,def=1" json:"notification_enabled,omitempty"`
	// Used for device_address of DeviceInfo field 2, a Bluetooth Mac address for
	// the device (e.g., to be used with EasyUnlock)
	BluetoothMacAddress *string `protobuf:"bytes,302,opt,name=bluetooth_mac_address,json=bluetoothMacAddress" json:"bluetooth_mac_address,omitempty"`
	// SHA-256 hash of the device master key (from the key exchange).
	// Differs from DeviceInfo field 3, which contains the actual master key.
	DeviceMasterKeyHash []byte `protobuf:"bytes,103,opt,name=device_master_key_hash,json=deviceMasterKeyHash" json:"device_master_key_hash,omitempty"`
	// A SecureMessage.EcP256PublicKey
	UserPublicKey []byte `protobuf:"bytes,4,req,name=user_public_key,json=userPublicKey" json:"user_public_key,omitempty"`
	// device's model name
	// (e.g., an android.os.Build.MODEL or UIDevice.model)
	DeviceModel *string `protobuf:"bytes,7,opt,name=device_model,json=deviceModel" json:"device_model,omitempty"`
	// device's locale
	Locale *string `protobuf:"bytes,8,opt,name=locale" json:"locale,omitempty"`
	// The handle for user_public_key (and implicitly, a master key)
	KeyHandle []byte `protobuf:"bytes,9,opt,name=key_handle,json=keyHandle" json:"key_handle,omitempty"`
	// The initial counter value for the device, sent by the device
	Counter *int64 `protobuf:"varint,12,opt,name=counter,def=0" json:"counter,omitempty"`
	// The Operating System version on the device
	// (e.g., an android.os.Build.DISPLAY or UIDevice.systemVersion)
	DeviceOsVersion *string `protobuf:"bytes,13,opt,name=device_os_version,json=deviceOsVersion" json:"device_os_version,omitempty"`
	// The Operating System version number on the device
	// (e.g., an android.os.Build.VERSION.SDK_INT)
	DeviceOsVersionCode *int64 `protobuf:"varint,14,opt,name=device_os_version_code,json=deviceOsVersionCode" json:"device_os_version_code,omitempty"`
	// The Operating System release on the device
	// (e.g., an android.os.Build.VERSION.RELEASE)
	DeviceOsRelease *string `protobuf:"bytes,15,opt,name=device_os_release,json=deviceOsRelease" json:"device_os_release,omitempty"`
	// The Operating System codename on the device
	// (e.g., an android.os.Build.VERSION.CODENAME or UIDevice.systemName)
	DeviceOsCodename *string `protobuf:"bytes,16,opt,name=device_os_codename,json=deviceOsCodename" json:"device_os_codename,omitempty"`
	// The software version running on the device
	// (e.g., Authenticator app version string)
	DeviceSoftwareVersion *string `protobuf:"bytes,17,opt,name=device_software_version,json=deviceSoftwareVersion" json:"device_software_version,omitempty"`
	// The software version number running on the device
	// (e.g., Authenticator app version code)
	DeviceSoftwareVersionCode *int64 `protobuf:"varint,18,opt,name=device_software_version_code,json=deviceSoftwareVersionCode" json:"device_software_version_code,omitempty"`
	// Software package information if applicable
	// (e.g., com.google.android.apps.authenticator2)
	DeviceSoftwarePackage *string `protobuf:"bytes,19,opt,name=device_software_package,json=deviceSoftwarePackage" json:"device_software_package,omitempty"`
	// Size of the display in thousandths of an inch (e.g., 7000 mils = 7 in)
	DeviceDisplayDiagonalMils *int32 `protobuf:"varint,22,opt,name=device_display_diagonal_mils,json=deviceDisplayDiagonalMils" json:"device_display_diagonal_mils,omitempty"`
	// For Authzen capable devices, their Authzen protocol version
	DeviceAuthzenVersion *int32 `protobuf:"varint,24,opt,name=device_authzen_version,json=deviceAuthzenVersion" json:"device_authzen_version,omitempty"`
	// Not all devices have device identifiers that fit in 64 bits.
	LongDeviceId []byte `protobuf:"bytes,29,opt,name=long_device_id,json=longDeviceId" json:"long_device_id,omitempty"`
	// The device manufacturer name
	// (e.g., android.os.Build.MANUFACTURER)
	DeviceManufacturer *string `protobuf:"bytes,31,opt,name=device_manufacturer,json=deviceManufacturer" json:"device_manufacturer,omitempty"`
	// Used to indicate which type of device this is.
	DeviceType *DeviceType `protobuf:"varint,32,opt,name=device_type,json=deviceType,enum=securegcm.DeviceType,def=1" json:"device_type,omitempty"`
	// Is this device using  a secure screenlock (e.g., pattern or pin unlock)
	UsingSecureScreenlock *bool `protobuf:"varint,400,opt,name=using_secure_screenlock,json=usingSecureScreenlock,def=0" json:"using_secure_screenlock,omitempty"`
	// Is auto-unlocking the screenlock (e.g., when at "home") supported?
	AutoUnlockScreenlockSupported *bool `protobuf:"varint,401,opt,name=auto_unlock_screenlock_supported,json=autoUnlockScreenlockSupported,def=0" json:"auto_unlock_screenlock_supported,omitempty"`
	// Is auto-unlocking the screenlock (e.g., when at "home") enabled?
	AutoUnlockScreenlockEnabled *bool `protobuf:"varint,402,opt,name=auto_unlock_screenlock_enabled,json=autoUnlockScreenlockEnabled,def=0" json:"auto_unlock_screenlock_enabled,omitempty"`
	// Does the device have a Bluetooth (classic) radio?
	BluetoothRadioSupported *bool `protobuf:"varint,403,opt,name=bluetooth_radio_supported,json=bluetoothRadioSupported,def=0" json:"bluetooth_radio_supported,omitempty"`
	// Is the Bluetooth (classic) radio on?
	BluetoothRadioEnabled *bool `protobuf:"varint,404,opt,name=bluetooth_radio_enabled,json=bluetoothRadioEnabled,def=0" json:"bluetooth_radio_enabled,omitempty"`
	// Does the device hardware support a mobile data connection?
	MobileDataSupported *bool `protobuf:"varint,405,opt,name=mobile_data_supported,json=mobileDataSupported,def=0" json:"mobile_data_supported,omitempty"`
	// Does the device support tethering?
	TetheringSupported *bool `protobuf:"varint,406,opt,name=tethering_supported,json=tetheringSupported,def=0" json:"tethering_supported,omitempty"`
	// Does the device have a BLE radio?
	BleRadioSupported *bool `protobuf:"varint,407,opt,name=ble_radio_supported,json=bleRadioSupported,def=0" json:"ble_radio_supported,omitempty"`
	// Is the device a "Pixel Experience" Android device?
	PixelExperience *bool `protobuf:"varint,408,opt,name=pixel_experience,json=pixelExperience,def=0" json:"pixel_experience,omitempty"`
	// Is the device running in the ARC++ container on a chromebook?
	ArcPlusPlus *bool `protobuf:"varint,409,opt,name=arc_plus_plus,json=arcPlusPlus,def=0" json:"arc_plus_plus,omitempty"`
	// Is the value set in |using_secure_screenlock| reliable? On some Android
	// devices, the platform API to get the screenlock state is not trustworthy.
	// See b/32212161.
	IsScreenlockStateFlaky *bool `protobuf:"varint,410,opt,name=is_screenlock_state_flaky,json=isScreenlockStateFlaky,def=0" json:"is_screenlock_state_flaky,omitempty"`
	// A list of multi-device software features supported by the device.
	SupportedSoftwareFeatures []SoftwareFeature `protobuf:"varint,411,rep,name=supported_software_features,json=supportedSoftwareFeatures,enum=securegcm.SoftwareFeature" json:"supported_software_features,omitempty"`
	// A list of multi-device software features currently enabled (active) on the
	// device.
	EnabledSoftwareFeatures []SoftwareFeature `protobuf:"varint,412,rep,name=enabled_software_features,json=enabledSoftwareFeatures,enum=securegcm.SoftwareFeature" json:"enabled_software_features,omitempty"`
	// The enrollment session id this is sent with
	EnrollmentSessionId []byte `protobuf:"bytes,1000,opt,name=enrollment_session_id,json=enrollmentSessionId" json:"enrollment_session_id,omitempty"`
	// A copy of the user's OAuth token
	OauthToken    *string `protobuf:"bytes,1001,opt,name=oauth_token,json=oauthToken" json:"oauth_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GcmDeviceInfo fields.
const (
	Default_GcmDeviceInfo_NotificationEnabled           = bool(true)
	Default_GcmDeviceInfo_Counter                       = int64(0)
	Default_GcmDeviceInfo_DeviceType                    = DeviceType_ANDROID
	Default_GcmDeviceInfo_UsingSecureScreenlock         = bool(false)
	Default_GcmDeviceInfo_AutoUnlockScreenlockSupported = bool(false)
	Default_GcmDeviceInfo_AutoUnlockScreenlockEnabled   = bool(false)
	Default_GcmDeviceInfo_BluetoothRadioSupported       = bool(false)
	Default_GcmDeviceInfo_BluetoothRadioEnabled         = bool(false)
	Default_GcmDeviceInfo_MobileDataSupported           = bool(false)
	Default_GcmDeviceInfo_TetheringSupported            = bool(false)
	Default_GcmDeviceInfo_BleRadioSupported             = bool(false)
	Default_GcmDeviceInfo_PixelExperience               = bool(false)
	Default_GcmDeviceInfo_ArcPlusPlus                   = bool(false)
	Default_GcmDeviceInfo_IsScreenlockStateFlaky        = bool(false)
)

func (x *GcmDeviceInfo) Reset() {
	*x = GcmDeviceInfo{}
	mi := &file_securegcm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcmDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcmDeviceInfo) ProtoMessage() {}

func (x *GcmDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_securegcm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcmDeviceInfo.ProtoReflect.Descriptor instead.
func (*GcmDeviceInfo) Descriptor() ([]byte, []int) {
	return file_securegcm_proto_rawDescGZIP(), []int{0}
}

func (x *GcmDeviceInfo) GetAndroidDeviceId() uint64 {
	if x != nil && x.AndroidDeviceId != nil {
		return *x.AndroidDeviceId
	}
	return 0
}

func (x *GcmDeviceInfo) GetGcmRegistrationId() []byte {
	if x != nil {
		return x.GcmRegistrationId
	}
	return nil
}

func (x *GcmDeviceInfo) GetApnRegistrationId() []byte {
	if x != nil {
		return x.ApnRegistrationId
	}
	return nil
}

func (x *GcmDeviceInfo) GetNotificationEnabled() bool {
	if x != nil && x.NotificationEnabled != nil {
		return *x.NotificationEnabled
	}
	return Default_GcmDeviceInfo_NotificationEnabled
}

func (x *GcmDeviceInfo) GetBluetoothMacAddress() string {
	if x != nil && x.BluetoothMacAddress != nil {
		return *x.BluetoothMacAddress
	}
	return ""
}

func (x *GcmDeviceInfo) GetDeviceMasterKeyHash() []byte {
	if x != nil {
		return x.DeviceMasterKeyHash
	}
	return nil
}

func (x *GcmDeviceInfo) GetUserPublicKey() []byte {
	if x != nil {
		return x.UserPublicKey
	}
	return nil
}

func (x *GcmDeviceInfo) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *GcmDeviceInfo) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *GcmDeviceInfo) GetKeyHandle() []byte {
	if x != nil {
		return x.KeyHandle
	}
	return nil
}

func (x *GcmDeviceInfo) GetCounter() int64 {
	if x != nil && x.Counter != nil {
		return *x.Counter
	}
	return Default_GcmDeviceInfo_Counter
}

func (x *GcmDeviceInfo) GetDeviceOsVersion() string {
	if x != nil && x.DeviceOsVersion != nil {
		return *x.DeviceOsVersion
	}
	return ""
}

func (x *GcmDeviceInfo) GetDeviceOsVersionCode() int64 {
	if x != nil && x.DeviceOsVersionCode != nil {
		return *x.DeviceOsVersionCode
	}
	return 0
}

func (x *GcmDeviceInfo) GetDeviceOsRelease() string {
	if x != nil && x.DeviceOsRelease != nil {
		return *x.DeviceOsRelease
	}
	return ""
}

func (x *GcmDeviceInfo) GetDeviceOsCodename() string {
	if x != nil && x.DeviceOsCodename != nil {
		return *x.DeviceOsCodename
	}
	return ""
}

func (x *GcmDeviceInfo) GetDeviceSoftwareVersion() string {
	if x != nil && x.DeviceSoftwareVersion != nil {
		return *x.DeviceSoftwareVersion
	}
	return ""
}

func (x *GcmDeviceInfo) GetDeviceSoftwareVersionCode() int64 {
	if x != nil && x.DeviceSoftwareVersionCode != nil {
		return *x.DeviceSoftwareVersionCode
	}
	return 0
}

func (x *GcmDeviceInfo) GetDeviceSoftwarePackage() string {
	if x != nil && x.DeviceSoftwarePackage != nil {
		return *x.DeviceSoftwarePackage
	}
	return ""
}

func (x *GcmDeviceInfo) GetDeviceDisplayDiagonalMils() int32 {
	if x != nil && x.DeviceDisplayDiagonalMils != nil {
		return *x.DeviceDisplayDiagonalMils
	}
	return 0
}

func (x *GcmDeviceInfo) GetDeviceAuthzenVersion() int32 {
	if x != nil && x.DeviceAuthzenVersion != nil {
		return *x.DeviceAuthzenVersion
	}
	return 0
}

func (x *GcmDeviceInfo) GetLongDeviceId() []byte {
	if x != nil {
		return x.LongDeviceId
	}
	return nil
}

func (x *GcmDeviceInfo) GetDeviceManufacturer() string {
	if x != nil && x.DeviceManufacturer != nil {
		return *x.DeviceManufacturer
	}
	return ""
}

func (x *GcmDeviceInfo) GetDeviceType() DeviceType {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return Default_GcmDeviceInfo_DeviceType
}

func (x *GcmDeviceInfo) GetUsingSecureScreenlock() bool {
	if x != nil && x.UsingSecureScreenlock != nil {
		return *x.UsingSecureScreenlock
	}
	return Default_GcmDeviceInfo_UsingSecureScreenlock
}

func (x *GcmDeviceInfo) GetAutoUnlockScreenlockSupported() bool {
	if x != nil && x.AutoUnlockScreenlockSupported != nil {
		return *x.AutoUnlockScreenlockSupported
	}
	return Default_GcmDeviceInfo_AutoUnlockScreenlockSupported
}

func (x *GcmDeviceInfo) GetAutoUnlockScreenlockEnabled() bool {
	if x != nil && x.AutoUnlockScreenlockEnabled != nil {
		return *x.AutoUnlockScreenlockEnabled
	}
	return Default_GcmDeviceInfo_AutoUnlockScreenlockEnabled
}

func (x *GcmDeviceInfo) GetBluetoothRadioSupported() bool {
	if x != nil && x.BluetoothRadioSupported != nil {
		return *x.BluetoothRadioSupported
	}
	return Default_GcmDeviceInfo_BluetoothRadioSupported
}

func (x *GcmDeviceInfo) GetBluetoothRadioEnabled() bool {
	if x != nil && x.BluetoothRadioEnabled != nil {
		return *x.BluetoothRadioEnabled
	}
	return Default_GcmDeviceInfo_BluetoothRadioEnabled
}

func (x *GcmDeviceInfo) GetMobileDataSupported() bool {
	if x != nil && x.MobileDataSupported != nil {
		return *x.MobileDataSupported
	}
	return Default_GcmDeviceInfo_MobileDataSupported
}

func (x *GcmDeviceInfo) GetTetheringSupported() bool {
	if x != nil && x.TetheringSupported != nil {
		return *x.TetheringSupported
	}
	return Default_GcmDeviceInfo_TetheringSupported
}

func (x *GcmDeviceInfo) GetBleRadioSupported() bool {
	if x != nil && x.BleRadioSupported != nil {
		return *x.BleRadioSupported
	}
	return Default_GcmDeviceInfo_BleRadioSupported
}

func (x *GcmDeviceInfo) GetPixelExperience() bool {
	if x != nil && x.PixelExperience != nil {
		return *x.PixelExperience
	}
	return Default_GcmDeviceInfo_PixelExperience
}

func (x *GcmDeviceInfo) GetArcPlusPlus() bool {
	if x != nil && x.ArcPlusPlus != nil {
		return *x.ArcPlusPlus
	}
	return Default_GcmDeviceInfo_ArcPlusPlus
}

func (x *GcmDeviceInfo) GetIsScreenlockStateFlaky() bool {
	if x != nil && x.IsScreenlockStateFlaky != nil {
		return *x.IsScreenlockStateFlaky
	}
	return Default_GcmDeviceInfo_IsScreenlockStateFlaky
}

func (x *GcmDeviceInfo) GetSupportedSoftwareFeatures() []SoftwareFeature {
	if x != nil {
		return x.SupportedSoftwareFeatures
	}
	return nil
}

func (x *GcmDeviceInfo) GetEnabledSoftwareFeatures() []SoftwareFeature {
	if x != nil {
		return x.EnabledSoftwareFeatures
	}
	return nil
}

func (x *GcmDeviceInfo) GetEnrollmentSessionId() []byte {
	if x != nil {
		return x.EnrollmentSessionId
	}
	return nil
}

func (x *GcmDeviceInfo) GetOauthToken() string {
	if x != nil && x.OauthToken != nil {
		return *x.OauthToken
	}
	return ""
}

type GcmMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *Type                  `protobuf:"varint,1,req,name=type,enum=securegcm.Type" json:"type,omitempty"`
	Version       *int32                 `protobuf:"varint,2,opt,name=version,def=0" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GcmMetadata fields.
const (
	Default_GcmMetadata_Version = int32(0)
)

func (x *GcmMetadata) Reset() {
	*x = GcmMetadata{}
	mi := &file_securegcm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcmMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcmMetadata) ProtoMessage() {}

func (x *GcmMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_securegcm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcmMetadata.ProtoReflect.Descriptor instead.
func (*GcmMetadata) Descriptor() ([]byte, []int) {
	return file_securegcm_proto_rawDescGZIP(), []int{1}
}

func (x *GcmMetadata) GetType() Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Type_ENROLLMENT
}

func (x *GcmMetadata) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_GcmMetadata_Version
}

type Tickle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time after which this tickle should expire
	ExpiryTime    *uint64 `protobuf:"fixed64,1,opt,name=expiry_time,json=expiryTime" json:"expiry_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tickle) Reset() {
	*x = Tickle{}
	mi := &file_securegcm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tickle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tickle) ProtoMessage() {}

func (x *Tickle) ProtoReflect() protoreflect.Message {
	mi := &file_securegcm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tickle.ProtoReflect.Descriptor instead.
func (*Tickle) Descriptor() ([]byte, []int) {
	return file_securegcm_proto_rawDescGZIP(), []int{2}
}

func (x *Tickle) GetExpiryTime() uint64 {
	if x != nil && x.ExpiryTime != nil {
		return *x.ExpiryTime
	}
	return 0
}

type LoginNotificationInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time at which the server received the login notification request.
	CreationTime *uint64 `protobuf:"fixed64,2,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	// Must correspond to user_id in LoginNotificationRequest, if set.
	Email *string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	// Host where the user's credentials were used to login, if meaningful.
	Host *string `protobuf:"bytes,4,opt,name=host" json:"host,omitempty"`
	// Location from where the user's credentials were used, if meaningful.
	Source *string `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
	// Type of login, e.g. ssh, gnome-screensaver, or web.
	EventType     *string `protobuf:"bytes,6,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginNotificationInfo) Reset() {
	*x = LoginNotificationInfo{}
	mi := &file_securegcm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginNotificationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginNotificationInfo) ProtoMessage() {}

func (x *LoginNotificationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_securegcm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginNotificationInfo.ProtoReflect.Descriptor instead.
func (*LoginNotificationInfo) Descriptor() ([]byte, []int) {
	return file_securegcm_proto_rawDescGZIP(), []int{3}
}

func (x *LoginNotificationInfo) GetCreationTime() uint64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *LoginNotificationInfo) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *LoginNotificationInfo) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *LoginNotificationInfo) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *LoginNotificationInfo) GetEventType() string {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return ""
}

var File_securegcm_proto protoreflect.FileDescriptor

const file_securegcm_proto_rawDesc = "" +
	"\n" +
	"\x0fsecuregcm.proto\x12\tsecuregcm\"\x98\x10\n" +
	"\rGcmDeviceInfo\x12*\n" +
	"\x11android_device_id\x18\x01 \x01(\x06R\x0fandroidDeviceId\x12.\n" +
	"\x13gcm_registration_id\x18f \x01(\fR\x11gcmRegistrationId\x12/\n" +
	"\x13apn_registration_id\x18\xca\x01 \x01(\fR\x11apnRegistrationId\x128\n" +
	"\x14notification_enabled\x18\xcb\x01 \x01(\b:\x04trueR\x13notificationEnabled\x123\n" +
	"\x15bluetooth_mac_address\x18\xae\x02 \x01(\tR\x13bluetoothMacAddress\x123\n" +
	"\x16device_master_key_hash\x18g \x01(\fR\x13deviceMasterKeyHash\x12&\n" +
	"\x0fuser_public_key\x18\x04 \x02(\fR\ruserPublicKey\x12!\n" +
	"\fdevice_model\x18\a \x01(\tR\vdeviceModel\x12\x16\n" +
	"\x06locale\x18\b \x01(\tR\x06locale\x12\x1d\n" +
	"\n" +
	"key_handle\x18\t \x01(\fR\tkeyHandle\x12\x1b\n" +
	"\acounter\x18\f \x01(\x03:\x010R\acounter\x12*\n" +
	"\x11device_os_version\x18\r \x01(\tR\x0fdeviceOsVersion\x123\n" +
	"\x16device_os_version_code\x18\x0e \x01(\x03R\x13deviceOsVersionCode\x12*\n" +
	"\x11device_os_release\x18\x0f \x01(\tR\x0fdeviceOsRelease\x12,\n" +
	"\x12device_os_codename\x18\x10 \x01(\tR\x10deviceOsCodename\x126\n" +
	"\x17device_software_version\x18\x11 \x01(\tR\x15deviceSoftwareVersion\x12?\n" +
	"\x1cdevice_software_version_code\x18\x12 \x01(\x03R\x19deviceSoftwareVersionCode\x126\n" +
	"\x17device_software_package\x18\x13 \x01(\tR\x15deviceSoftwarePackage\x12?\n" +
	"\x1cdevice_display_diagonal_mils\x18\x16 \x01(\x05R\x19deviceDisplayDiagonalMils\x124\n" +
	"\x16device_authzen_version\x18\x18 \x01(\x05R\x14deviceAuthzenVersion\x12$\n" +
	"\x0elong_device_id\x18\x1d \x01(\fR\flongDeviceId\x12/\n" +
	"\x13device_manufacturer\x18\x1f \x01(\tR\x12deviceManufacturer\x12?\n" +
	"\vdevice_type\x18  \x01(\x0e2\x15.securegcm.DeviceType:\aANDROIDR\n" +
	"deviceType\x12>\n" +
	"\x17using_secure_screenlock\x18\x90\x03 \x01(\b:\x05falseR\x15usingSecureScreenlock\x12O\n" +
	" auto_unlock_screenlock_supported\x18\x91\x03 \x01(\b:\x05falseR\x1dautoUnlockScreenlockSupported\x12K\n" +
	"\x1eauto_unlock_screenlock_enabled\x18\x92\x03 \x01(\b:\x05falseR\x1bautoUnlockScreenlockEnabled\x12B\n" +
	"\x19bluetooth_radio_supported\x18\x93\x03 \x01(\b:\x05falseR\x17bluetoothRadioSupported\x12>\n" +
	"\x17bluetooth_radio_enabled\x18\x94\x03 \x01(\b:\x05falseR\x15bluetoothRadioEnabled\x12:\n" +
	"\x15mobile_data_supported\x18\x95\x03 \x01(\b:\x05falseR\x13mobileDataSupported\x127\n" +
	"\x13tethering_supported\x18\x96\x03 \x01(\b:\x05falseR\x12tetheringSupported\x126\n" +
	"\x13ble_radio_supported\x18\x97\x03 \x01(\b:\x05falseR\x11bleRadioSupported\x121\n" +
	"\x10pixel_experience\x18\x98\x03 \x01(\b:\x05falseR\x0fpixelExperience\x12*\n" +
	"\rarc_plus_plus\x18\x99\x03 \x01(\b:\x05falseR\varcPlusPlus\x12A\n" +
	"\x19is_screenlock_state_flaky\x18\x9a\x03 \x01(\b:\x05falseR\x16isScreenlockStateFlaky\x12[\n" +
	"\x1bsupported_software_features\x18\x9b\x03 \x03(\x0e2\x1a.securegcm.SoftwareFeatureR\x19supportedSoftwareFeatures\x12W\n" +
	"\x19enabled_software_features\x18\x9c\x03 \x03(\x0e2\x1a.securegcm.SoftwareFeatureR\x17enabledSoftwareFeatures\x123\n" +
	"\x15enrollment_session_id\x18\xe8\a \x01(\fR\x13enrollmentSessionId\x12 \n" +
	"\voauth_token\x18\xe9\a \x01(\tR\n" +
	"oauthToken\"O\n" +
	"\vGcmMetadata\x12#\n" +
	"\x04type\x18\x01 \x02(\x0e2\x0f.securegcm.TypeR\x04type\x12\x1b\n" +
	"\aversion\x18\x02 \x01(\x05:\x010R\aversion\")\n" +
	"\x06Tickle\x12\x1f\n" +
	"\vexpiry_time\x18\x01 \x01(\x06R\n" +
	"expiryTime\"\x9d\x01\n" +
	"\x15LoginNotificationInfo\x12#\n" +
	"\rcreation_time\x18\x02 \x01(\x06R\fcreationTime\x12\x14\n" +
	"\x05email\x18\x03 \x01(\tR\x05email\x12\x12\n" +
	"\x04host\x18\x04 \x01(\tR\x04host\x12\x16\n" +
	"\x06source\x18\x05 \x01(\tR\x06source\x12\x1d\n" +
	"\n" +
	"event_type\x18\x06 \x01(\tR\teventType*;\n" +
	"\x17AppleDeviceDiagonalMils\x12\x10\n" +
	"\vAPPLE_PHONE\x10\xa0\x1f\x12\x0e\n" +
	"\tAPPLE_PAD\x10\xdc=*Q\n" +
	"\n" +
	"DeviceType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aANDROID\x10\x01\x12\n" +
	"\n" +
	"\x06CHROME\x10\x02\x12\a\n" +
	"\x03IOS\x10\x03\x12\v\n" +
	"\aBROWSER\x10\x04\x12\a\n" +
	"\x03OSX\x10\x05*\xe8\x01\n" +
	"\x0fSoftwareFeature\x12\x13\n" +
	"\x0fUNKNOWN_FEATURE\x10\x00\x12\x18\n" +
	"\x14BETTER_TOGETHER_HOST\x10\x01\x12\x1a\n" +
	"\x16BETTER_TOGETHER_CLIENT\x10\x02\x12\x14\n" +
	"\x10EASY_UNLOCK_HOST\x10\x03\x12\x16\n" +
	"\x12EASY_UNLOCK_CLIENT\x10\x04\x12\x15\n" +
	"\x11MAGIC_TETHER_HOST\x10\x05\x12\x17\n" +
	"\x13MAGIC_TETHER_CLIENT\x10\x06\x12\x14\n" +
	"\x10SMS_CONNECT_HOST\x10\a\x12\x16\n" +
	"\x12SMS_CONNECT_CLIENT\x10\b*\xb8\x03\n" +
	"\x10InvocationReason\x12\x12\n" +
	"\x0eREASON_UNKNOWN\x10\x00\x12\x19\n" +
	"\x15REASON_INITIALIZATION\x10\x01\x12\x13\n" +
	"\x0fREASON_PERIODIC\x10\x02\x12\x18\n" +
	"\x14REASON_SLOW_PERIODIC\x10\x03\x12\x18\n" +
	"\x14REASON_FAST_PERIODIC\x10\x04\x12\x15\n" +
	"\x11REASON_EXPIRATION\x10\x05\x12\x1b\n" +
	"\x17REASON_FAILURE_RECOVERY\x10\x06\x12\x16\n" +
	"\x12REASON_NEW_ACCOUNT\x10\a\x12\x1a\n" +
	"\x16REASON_CHANGED_ACCOUNT\x10\b\x12\x1a\n" +
	"\x16REASON_FEATURE_TOGGLED\x10\t\x12\x1b\n" +
	"\x17REASON_SERVER_INITIATED\x10\n" +
	"\x12\x19\n" +
	"\x15REASON_ADDRESS_CHANGE\x10\v\x12\x1a\n" +
	"\x16REASON_SOFTWARE_UPDATE\x10\f\x12\x11\n" +
	"\rREASON_MANUAL\x10\r\x12\"\n" +
	"\x1eREASON_CUSTOM_KEY_INVALIDATION\x10\x0e\x12\x1d\n" +
	"\x19REASON_PROXIMITY_PERIODIC\x10\x0f*\x84\x03\n" +
	"\x04Type\x12\x0e\n" +
	"\n" +
	"ENROLLMENT\x10\x00\x12\n" +
	"\n" +
	"\x06TICKLE\x10\x01\x12\x0e\n" +
	"\n" +
	"TX_REQUEST\x10\x02\x12\f\n" +
	"\bTX_REPLY\x10\x03\x12\x13\n" +
	"\x0fTX_SYNC_REQUEST\x10\x04\x12\x14\n" +
	"\x10TX_SYNC_RESPONSE\x10\x05\x12\v\n" +
	"\aTX_PING\x10\x06\x12\x16\n" +
	"\x12DEVICE_INFO_UPDATE\x10\a\x12\x15\n" +
	"\x11TX_CANCEL_REQUEST\x10\b\x12\x19\n" +
	"\x15PROXIMITYAUTH_PAIRING\x10\n" +
	"\x12\x1c\n" +
	"\x18GCMV1_IDENTITY_ASSERTION\x10\v\x12,\n" +
	"(DEVICE_TO_DEVICE_RESPONDER_HELLO_PAYLOAD\x10\f\x12\x1c\n" +
	"\x18DEVICE_TO_DEVICE_MESSAGE\x10\r\x12\x1d\n" +
	"\x19DEVICE_PROXIMITY_CALLBACK\x10\x0e\x12\x1f\n" +
	"\x1bUNLOCK_KEY_SIGNED_CHALLENGE\x10\x0f\x12\x16\n" +
	"\x12LOGIN_NOTIFICATION\x10eB\x82\x01\n" +
	"+com.google.security.cryptauth.lib.securegcmB\x0eSecureGcmProtoH\x03Z:github.com/ACLzz/go-qshare/internal/protobuf/gen/securegcm\xa2\x02\x04SGCM"

var (
	file_securegcm_proto_rawDescOnce sync.Once
	file_securegcm_proto_rawDescData []byte
)

func file_securegcm_proto_rawDescGZIP() []byte {
	file_securegcm_proto_rawDescOnce.Do(func() {
		file_securegcm_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_securegcm_proto_rawDesc), len(file_securegcm_proto_rawDesc)))
	})
	return file_securegcm_proto_rawDescData
}

var file_securegcm_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_securegcm_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_securegcm_proto_goTypes = []any{
	(AppleDeviceDiagonalMils)(0),  // 0: securegcm.AppleDeviceDiagonalMils
	(DeviceType)(0),               // 1: securegcm.DeviceType
	(SoftwareFeature)(0),          // 2: securegcm.SoftwareFeature
	(InvocationReason)(0),         // 3: securegcm.InvocationReason
	(Type)(0),                     // 4: securegcm.Type
	(*GcmDeviceInfo)(nil),         // 5: securegcm.GcmDeviceInfo
	(*GcmMetadata)(nil),           // 6: securegcm.GcmMetadata
	(*Tickle)(nil),                // 7: securegcm.Tickle
	(*LoginNotificationInfo)(nil), // 8: securegcm.LoginNotificationInfo
}
var file_securegcm_proto_depIdxs = []int32{
	1, // 0: securegcm.GcmDeviceInfo.device_type:type_name -> securegcm.DeviceType
	2, // 1: securegcm.GcmDeviceInfo.supported_software_features:type_name -> securegcm.SoftwareFeature
	2, // 2: securegcm.GcmDeviceInfo.enabled_software_features:type_name -> securegcm.SoftwareFeature
	4, // 3: securegcm.GcmMetadata.type:type_name -> securegcm.Type
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_securegcm_proto_init() }
func file_securegcm_proto_init() {
	if File_securegcm_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_securegcm_proto_rawDesc), len(file_securegcm_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_securegcm_proto_goTypes,
		DependencyIndexes: file_securegcm_proto_depIdxs,
		EnumInfos:         file_securegcm_proto_enumTypes,
		MessageInfos:      file_securegcm_proto_msgTypes,
	}.Build()
	File_securegcm_proto = out.File
	file_securegcm_proto_goTypes = nil
	file_securegcm_proto_depIdxs = nil
}
