// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: device_to_device_messages.proto

package securegcm

import (
	securemessage "github.com/ACLzz/go-qshare/internal/protobuf/gen/securemessage"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of curve
type Curve int32

const (
	Curve_ED_25519 Curve = 1
)

// Enum value maps for Curve.
var (
	Curve_name = map[int32]string{
		1: "ED_25519",
	}
	Curve_value = map[string]int32{
		"ED_25519": 1,
	}
)

func (x Curve) Enum() *Curve {
	p := new(Curve)
	*p = x
	return p
}

func (x Curve) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Curve) Descriptor() protoreflect.EnumDescriptor {
	return file_device_to_device_messages_proto_enumTypes[0].Descriptor()
}

func (Curve) Type() protoreflect.EnumType {
	return &file_device_to_device_messages_proto_enumTypes[0]
}

func (x Curve) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Curve) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Curve(num)
	return nil
}

// Deprecated: Use Curve.Descriptor instead.
func (Curve) EnumDescriptor() ([]byte, []int) {
	return file_device_to_device_messages_proto_rawDescGZIP(), []int{0}
}

// Used by protocols between devices
type DeviceToDeviceMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the payload of the message
	Message []byte `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	// the sequence number of the message - must be increasing.
	SequenceNumber *int32 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeviceToDeviceMessage) Reset() {
	*x = DeviceToDeviceMessage{}
	mi := &file_device_to_device_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceToDeviceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceToDeviceMessage) ProtoMessage() {}

func (x *DeviceToDeviceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_device_to_device_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceToDeviceMessage.ProtoReflect.Descriptor instead.
func (*DeviceToDeviceMessage) Descriptor() ([]byte, []int) {
	return file_device_to_device_messages_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceToDeviceMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *DeviceToDeviceMessage) GetSequenceNumber() int32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

// sent as the first message from initiator to responder
// in an unauthenticated Diffie-Hellman Key Exchange
type InitiatorHello struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The session public key to send to the responder
	PublicDhKey *securemessage.GenericPublicKey `protobuf:"bytes,1,opt,name=public_dh_key,json=publicDhKey" json:"public_dh_key,omitempty"`
	// The protocol version
	ProtocolVersion *int32 `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,def=0" json:"protocol_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for InitiatorHello fields.
const (
	Default_InitiatorHello_ProtocolVersion = int32(0)
)

func (x *InitiatorHello) Reset() {
	*x = InitiatorHello{}
	mi := &file_device_to_device_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiatorHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiatorHello) ProtoMessage() {}

func (x *InitiatorHello) ProtoReflect() protoreflect.Message {
	mi := &file_device_to_device_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiatorHello.ProtoReflect.Descriptor instead.
func (*InitiatorHello) Descriptor() ([]byte, []int) {
	return file_device_to_device_messages_proto_rawDescGZIP(), []int{1}
}

func (x *InitiatorHello) GetPublicDhKey() *securemessage.GenericPublicKey {
	if x != nil {
		return x.PublicDhKey
	}
	return nil
}

func (x *InitiatorHello) GetProtocolVersion() int32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return Default_InitiatorHello_ProtocolVersion
}

// sent inside the header of the first message from the responder to the
// initiator in an unauthenticated Diffie-Hellman Key Exchange
type ResponderHello struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The session public key to send to the initiator
	PublicDhKey *securemessage.GenericPublicKey `protobuf:"bytes,1,opt,name=public_dh_key,json=publicDhKey" json:"public_dh_key,omitempty"`
	// The protocol version
	ProtocolVersion *int32 `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,def=0" json:"protocol_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for ResponderHello fields.
const (
	Default_ResponderHello_ProtocolVersion = int32(0)
)

func (x *ResponderHello) Reset() {
	*x = ResponderHello{}
	mi := &file_device_to_device_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponderHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponderHello) ProtoMessage() {}

func (x *ResponderHello) ProtoReflect() protoreflect.Message {
	mi := &file_device_to_device_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponderHello.ProtoReflect.Descriptor instead.
func (*ResponderHello) Descriptor() ([]byte, []int) {
	return file_device_to_device_messages_proto_rawDescGZIP(), []int{2}
}

func (x *ResponderHello) GetPublicDhKey() *securemessage.GenericPublicKey {
	if x != nil {
		return x.PublicDhKey
	}
	return nil
}

func (x *ResponderHello) GetProtocolVersion() int32 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return Default_ResponderHello_ProtocolVersion
}

// A convenience proto for encoding curve points in affine representation
type EcPoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Curve *Curve                 `protobuf:"varint,1,req,name=curve,enum=securegcm.Curve" json:"curve,omitempty"`
	// x and y are encoded in big-endian two's complement
	// client MUST verify (x,y) is a valid point on the specified curve
	X             []byte `protobuf:"bytes,2,req,name=x" json:"x,omitempty"`
	Y             []byte `protobuf:"bytes,3,req,name=y" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EcPoint) Reset() {
	*x = EcPoint{}
	mi := &file_device_to_device_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EcPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcPoint) ProtoMessage() {}

func (x *EcPoint) ProtoReflect() protoreflect.Message {
	mi := &file_device_to_device_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcPoint.ProtoReflect.Descriptor instead.
func (*EcPoint) Descriptor() ([]byte, []int) {
	return file_device_to_device_messages_proto_rawDescGZIP(), []int{3}
}

func (x *EcPoint) GetCurve() Curve {
	if x != nil && x.Curve != nil {
		return *x.Curve
	}
	return Curve_ED_25519
}

func (x *EcPoint) GetX() []byte {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *EcPoint) GetY() []byte {
	if x != nil {
		return x.Y
	}
	return nil
}

type SpakeHandshakeMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Each flow in the protocol bumps this counter
	FlowNumber *int32 `protobuf:"varint,1,opt,name=flow_number,json=flowNumber" json:"flow_number,omitempty"`
	// Some (but not all) SPAKE flows send a point on an elliptic curve
	EcPoint *EcPoint `protobuf:"bytes,2,opt,name=ec_point,json=ecPoint" json:"ec_point,omitempty"`
	// Some (but not all) SPAKE flows send a hash value
	HashValue []byte `protobuf:"bytes,3,opt,name=hash_value,json=hashValue" json:"hash_value,omitempty"`
	// The last flow of a SPAKE protocol can send an optional payload,
	// since the key exchange is already complete on the sender's side.
	Payload       []byte `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpakeHandshakeMessage) Reset() {
	*x = SpakeHandshakeMessage{}
	mi := &file_device_to_device_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpakeHandshakeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpakeHandshakeMessage) ProtoMessage() {}

func (x *SpakeHandshakeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_device_to_device_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpakeHandshakeMessage.ProtoReflect.Descriptor instead.
func (*SpakeHandshakeMessage) Descriptor() ([]byte, []int) {
	return file_device_to_device_messages_proto_rawDescGZIP(), []int{4}
}

func (x *SpakeHandshakeMessage) GetFlowNumber() int32 {
	if x != nil && x.FlowNumber != nil {
		return *x.FlowNumber
	}
	return 0
}

func (x *SpakeHandshakeMessage) GetEcPoint() *EcPoint {
	if x != nil {
		return x.EcPoint
	}
	return nil
}

func (x *SpakeHandshakeMessage) GetHashValue() []byte {
	if x != nil {
		return x.HashValue
	}
	return nil
}

func (x *SpakeHandshakeMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_device_to_device_messages_proto protoreflect.FileDescriptor

const file_device_to_device_messages_proto_rawDesc = "" +
	"\n" +
	"\x1fdevice_to_device_messages.proto\x12\tsecuregcm\x1a\x13securemessage.proto\"Z\n" +
	"\x15DeviceToDeviceMessage\x12\x18\n" +
	"\amessage\x18\x01 \x01(\fR\amessage\x12'\n" +
	"\x0fsequence_number\x18\x02 \x01(\x05R\x0esequenceNumber\"\x83\x01\n" +
	"\x0eInitiatorHello\x12C\n" +
	"\rpublic_dh_key\x18\x01 \x01(\v2\x1f.securemessage.GenericPublicKeyR\vpublicDhKey\x12,\n" +
	"\x10protocol_version\x18\x02 \x01(\x05:\x010R\x0fprotocolVersion\"\x83\x01\n" +
	"\x0eResponderHello\x12C\n" +
	"\rpublic_dh_key\x18\x01 \x01(\v2\x1f.securemessage.GenericPublicKeyR\vpublicDhKey\x12,\n" +
	"\x10protocol_version\x18\x02 \x01(\x05:\x010R\x0fprotocolVersion\"M\n" +
	"\aEcPoint\x12&\n" +
	"\x05curve\x18\x01 \x02(\x0e2\x10.securegcm.CurveR\x05curve\x12\f\n" +
	"\x01x\x18\x02 \x02(\fR\x01x\x12\f\n" +
	"\x01y\x18\x03 \x02(\fR\x01y\"\xa0\x01\n" +
	"\x15SpakeHandshakeMessage\x12\x1f\n" +
	"\vflow_number\x18\x01 \x01(\x05R\n" +
	"flowNumber\x12-\n" +
	"\bec_point\x18\x02 \x01(\v2\x12.securegcm.EcPointR\aecPoint\x12\x1d\n" +
	"\n" +
	"hash_value\x18\x03 \x01(\fR\thashValue\x12\x18\n" +
	"\apayload\x18\x04 \x01(\fR\apayload*\x15\n" +
	"\x05Curve\x12\f\n" +
	"\bED_25519\x10\x01B\x8f\x01\n" +
	"+com.google.security.cryptauth.lib.securegcmB\x1bDeviceToDeviceMessagesProtoH\x03Z:github.com/ACLzz/go-qshare/internal/protobuf/gen/securegcm\xa2\x02\x04SGCM"

var (
	file_device_to_device_messages_proto_rawDescOnce sync.Once
	file_device_to_device_messages_proto_rawDescData []byte
)

func file_device_to_device_messages_proto_rawDescGZIP() []byte {
	file_device_to_device_messages_proto_rawDescOnce.Do(func() {
		file_device_to_device_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_device_to_device_messages_proto_rawDesc), len(file_device_to_device_messages_proto_rawDesc)))
	})
	return file_device_to_device_messages_proto_rawDescData
}

var file_device_to_device_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_device_to_device_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_device_to_device_messages_proto_goTypes = []any{
	(Curve)(0),                             // 0: securegcm.Curve
	(*DeviceToDeviceMessage)(nil),          // 1: securegcm.DeviceToDeviceMessage
	(*InitiatorHello)(nil),                 // 2: securegcm.InitiatorHello
	(*ResponderHello)(nil),                 // 3: securegcm.ResponderHello
	(*EcPoint)(nil),                        // 4: securegcm.EcPoint
	(*SpakeHandshakeMessage)(nil),          // 5: securegcm.SpakeHandshakeMessage
	(*securemessage.GenericPublicKey)(nil), // 6: securemessage.GenericPublicKey
}
var file_device_to_device_messages_proto_depIdxs = []int32{
	6, // 0: securegcm.InitiatorHello.public_dh_key:type_name -> securemessage.GenericPublicKey
	6, // 1: securegcm.ResponderHello.public_dh_key:type_name -> securemessage.GenericPublicKey
	0, // 2: securegcm.EcPoint.curve:type_name -> securegcm.Curve
	4, // 3: securegcm.SpakeHandshakeMessage.ec_point:type_name -> securegcm.EcPoint
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_device_to_device_messages_proto_init() }
func file_device_to_device_messages_proto_init() {
	if File_device_to_device_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_device_to_device_messages_proto_rawDesc), len(file_device_to_device_messages_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_device_to_device_messages_proto_goTypes,
		DependencyIndexes: file_device_to_device_messages_proto_depIdxs,
		EnumInfos:         file_device_to_device_messages_proto_enumTypes,
		MessageInfos:      file_device_to_device_messages_proto_msgTypes,
	}.Build()
	File_device_to_device_messages_proto = out.File
	file_device_to_device_messages_proto_goTypes = nil
	file_device_to_device_messages_proto_depIdxs = nil
}
